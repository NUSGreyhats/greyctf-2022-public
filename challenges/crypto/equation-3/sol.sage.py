

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_17927320462303249934937883811002903172176765780523264738218843188366231264362958134997396675322722182212946103387542427667614560300824275082930993438796152667358057905501388442666203835655421406331007550762620857458776925047486735156307951871159956726716491719411963027695083171938415102823702868577031391687645311173920337955011217886182822688961228884185499009594127468988403104089260821647176060803872160462815870709958513255136202811139994310113641543989278813854109471924049657836577005690555289636010431314636269606536590316072139220601735271676852874127018524038520010954224014233667071407682730320232372776827 = Integer(17927320462303249934937883811002903172176765780523264738218843188366231264362958134997396675322722182212946103387542427667614560300824275082930993438796152667358057905501388442666203835655421406331007550762620857458776925047486735156307951871159956726716491719411963027695083171938415102823702868577031391687645311173920337955011217886182822688961228884185499009594127468988403104089260821647176060803872160462815870709958513255136202811139994310113641543989278813854109471924049657836577005690555289636010431314636269606536590316072139220601735271676852874127018524038520010954224014233667071407682730320232372776827); _sage_const_100577742074524497824622354284958380192395932541541769441112753917086618375934151886811818515255236370430705281962608314561237109077495630714819650375461610661996673790851901731468480295351122714442494101061587758379499719189556551665949945578334563022171989974062582776038308628748868278191588382130551996059296674056234448133968345091765916365446435322213390046139281082768445159669265752911993562659968822979249892785281293997707125331015620097817687624536491945132051369970996889180780899283750458519793860458278758958506958859769783056909579049512924757044155161743553730046009536195889458438629687 = Integer(100577742074524497824622354284958380192395932541541769441112753917086618375934151886811818515255236370430705281962608314561237109077495630714819650375461610661996673790851901731468480295351122714442494101061587758379499719189556551665949945578334563022171989974062582776038308628748868278191588382130551996059296674056234448133968345091765916365446435322213390046139281082768445159669265752911993562659968822979249892785281293997707125331015620097817687624536491945132051369970996889180780899283750458519793860458278758958506958859769783056909579049512924757044155161743553730046009536195889458438629687); _sage_const_2003951756376962277245326364596092323096230607377054702381631019234315528219853510695662722224615100682500364781873276760728334939695764978309921643283780194990737457777758114510482407391691402452626548736439965238456280273451951586803046081215905097069877827179810815082967302511256271441525836908557322461721657533200100557922535735147226911891969812798091093952987871841259122497133821241295665437561188729345076580897082811617772997121896049516828435778643217903918918265879458528692105196487215822555819641050311803422964795441579496147832806519077135807484008858521044062203786506949496670915303512592707226821 = Integer(2003951756376962277245326364596092323096230607377054702381631019234315528219853510695662722224615100682500364781873276760728334939695764978309921643283780194990737457777758114510482407391691402452626548736439965238456280273451951586803046081215905097069877827179810815082967302511256271441525836908557322461721657533200100557922535735147226911891969812798091093952987871841259122497133821241295665437561188729345076580897082811617772997121896049516828435778643217903918918265879458528692105196487215822555819641050311803422964795441579496147832806519077135807484008858521044062203786506949496670915303512592707226821); _sage_const_7842476000748164302616238377802737357115292476364667000564453174629609557251054926850285511197179944483904784694635672100105186390897281910141763726425320305959281506156192418095260350510510648997847344726031269146623789249427231347793868520688988991592777533209678260490936250483388903076779742296927870940127254416263201582230523071473370769350316168840730173343387822957123285098313420379654615838488913383254944175999219974968139986636628467569862338260293900937389611580044080917896692619566739903519816847072924323097877881160608043282469962187110248263940322414184355056247541767071153230286768196602717594692 = Integer(7842476000748164302616238377802737357115292476364667000564453174629609557251054926850285511197179944483904784694635672100105186390897281910141763726425320305959281506156192418095260350510510648997847344726031269146623789249427231347793868520688988991592777533209678260490936250483388903076779742296927870940127254416263201582230523071473370769350316168840730173343387822957123285098313420379654615838488913383254944175999219974968139986636628467569862338260293900937389611580044080917896692619566739903519816847072924323097877881160608043282469962187110248263940322414184355056247541767071153230286768196602717594692); _sage_const_13 = Integer(13); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5); _sage_const_7 = Integer(7); _sage_const_31 = Integer(31); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_0p025 = RealNumber('0.025')
from Crypto.Util.number import long_to_bytes

N = _sage_const_17927320462303249934937883811002903172176765780523264738218843188366231264362958134997396675322722182212946103387542427667614560300824275082930993438796152667358057905501388442666203835655421406331007550762620857458776925047486735156307951871159956726716491719411963027695083171938415102823702868577031391687645311173920337955011217886182822688961228884185499009594127468988403104089260821647176060803872160462815870709958513255136202811139994310113641543989278813854109471924049657836577005690555289636010431314636269606536590316072139220601735271676852874127018524038520010954224014233667071407682730320232372776827 
e = _sage_const
f = _sage_const_2003951756376962277245326364596092323096230607377054702381631019234315528219853510695662722224615100682500364781873276760728334939695764978309921643283780194990737457777758114510482407391691402452626548736439965238456280273451951586803046081215905097069877827179810815082967302511256271441525836908557322461721657533200100557922535735147226911891969812798091093952987871841259122497133821241295665437561188729345076580897082811617772997121896049516828435778643217903918918265879458528692105196487215822555819641050311803422964795441579496147832806519077135807484008858521044062203786506949496670915303512592707226821 
g = _sage_const_7842476000748164302616238377802737357115292476364667000564453174629609557251054926850285511197179944483904784694635672100105186390897281910141763726425320305959281506156192418095260350510510648997847344726031269146623789249427231347793868520688988991592777533209678260490936250483388903076779742296927870940127254416263201582230523071473370769350316168840730173343387822957123285098313420379654615838488913383254944175999219974968139986636628467569862338260293900937389611580044080917896692619566739903519816847072924323097877881160608043282469962187110248263940322414184355056247541767071153230286768196602717594692 

### Part 0 

F = ZZ['m1, m2']; (m1, m2,) = F._first_ngens(2)

ff = (_sage_const_13  * m2 ** _sage_const_3  + m1 * m2 + _sage_const_5  * m1) - f
gg = (_sage_const_7  * m2 + _sage_const_31  * m1 ** _sage_const_2 ) - g
h = ff.resultant(gg, m1)
k = ff.resultant(gg, m2)

### Part 1

def mod(x, modulus):
    r = x
    for a in modulus:
        r = r % a
    return r

def powerPoly(a, b, modulus):
    res = _sage_const_1 
    while (b > _sage_const_0 ):
        if (b & _sage_const_1 ): res = mod(res * a, modulus)
        a = mod(a * a, modulus)
        b = b // _sage_const_2 
    return res

F = Zmod(N)['m1, m2']; (m1, m2,) = F._first_ngens(2)

ff = ff(m1 = m1, m2 = m2)
gg = gg(m1 = m1, m2 = m2)
h = h(m1 = m1, m2 = m2)
k = k(m1 = m1, m2 = m2)

hh = powerPoly(m1, e, [ff, gg, h, k])
kk = powerPoly(m2, e, [ff, gg, h, k])

### Part 2

F = ZZ['c, m1, m2']; (c, m1, m2,) = F._first_ngens(3)

ff = F(ff(m1 = m1, m2 = m2))
gg = F(gg(m1 = m1, m2 = m2))

h = F(-c + hh(m1 = m1, m2 = m2))
h = h.resultant(ff, m1).resultant(ff.resultant(gg, m1), m2)

k = F(-c + kk(m1 = m1, m2 = m2))
k = k.resultant(ff, m1).resultant(ff.resultant(gg, m1), m2)

print(h)
print(k)

### Part 3

F = Zmod(N)['c']; (c,) = F._first_ngens(1)

f = h(c = c, m1 = _sage_const_0 , m2 = _sage_const_0 )
f = f / f.coefficients()[-_sage_const_1 ]

print(long_to_bytes(int(f.small_roots(epsilon=_sage_const_0p025 )[_sage_const_0 ])))

f = k(c = c, m1 = _sage_const_0 , m2 = _sage_const_0 )
f = f / f.coefficients()[-_sage_const_1 ]
print(long_to_bytes(int(f.small_roots(epsilon=_sage_const_0p025 )[_sage_const_0 ])))

