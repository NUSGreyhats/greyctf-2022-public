

# This file was *autogenerated* from the file naive.sage
from sage.all_cmdline import *   # import sage library

_sage_const_7 = Integer(7); _sage_const_2 = Integer(2); _sage_const_512 = Integer(512); _sage_const_9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683817 = Integer(9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683817); _sage_const_14 = Integer(14); _sage_const_13 = Integer(13); _sage_const_9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683794 = Integer(9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683794); _sage_const_12 = Integer(12); _sage_const_9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683779 = Integer(9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683779); _sage_const_11 = Integer(11); _sage_const_186 = Integer(186); _sage_const_10 = Integer(10); _sage_const_252 = Integer(252); _sage_const_9 = Integer(9); _sage_const_9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683204 = Integer(9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683204); _sage_const_8 = Integer(8); _sage_const_9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683073 = Integer(9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683073); _sage_const_806 = Integer(806); _sage_const_6 = Integer(6); _sage_const_886 = Integer(886); _sage_const_5 = Integer(5); _sage_const_9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683495 = Integer(9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683495); _sage_const_4 = Integer(4); _sage_const_9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683621 = Integer(9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683621); _sage_const_3 = Integer(3); _sage_const_109 = Integer(109); _sage_const_9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683799 = Integer(9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683799); _sage_const_1 = Integer(1); _sage_const_8962607566406882199675004280724845190368675470080757634774685876074323550352697378725496930349833984249221837085369500235938749325874312457043818400322247 = Integer(8962607566406882199675004280724845190368675470080757634774685876074323550352697378725496930349833984249221837085369500235938749325874312457043818400322247); _sage_const_3337021588594422092310501575569035015793888607775320698822478199558062978669690430311134844149545347869843739089757361497296974259285965107448711022785383 = Integer(3337021588594422092310501575569035015793888607775320698822478199558062978669690430311134844149545347869843739089757361497296974259285965107448711022785383); _sage_const_713847582123411122060960658489156835463460667568575895992013853906604470365897024962135987117544760325370118419731307773225044281379827746161946475302902 = Integer(713847582123411122060960658489156835463460667568575895992013853906604470365897024962135987117544760325370118419731307773225044281379827746161946475302902); _sage_const_7607070037188627265482280445225765886909767973749738211753579779720323813441283786573743394570716096511457952150457455105672212964546550043524519124831819 = Integer(7607070037188627265482280445225765886909767973749738211753579779720323813441283786573743394570716096511457952150457455105672212964546550043524519124831819); _sage_const_7558571214025553741786144820642443061381689386358397166956819857443834264449819665203003481410588612156807982887595037809886138172294332404771320977663748 = Integer(7558571214025553741786144820642443061381689386358397166956819857443834264449819665203003481410588612156807982887595037809886138172294332404771320977663748); _sage_const_304700504136012424238865405671041686114024093887434383351181862662217744733576172993693671466544791099572450525267090561520888596125171684534505219084780 = Integer(304700504136012424238865405671041686114024093887434383351181862662217744733576172993693671466544791099572450525267090561520888596125171684534505219084780); _sage_const_8719178863192150720460952697284938700244569410239992570708742933711653269124671049093036115358035100173437671585783944021646846126282180789376109012662448 = Integer(8719178863192150720460952697284938700244569410239992570708742933711653269124671049093036115358035100173437671585783944021646846126282180789376109012662448); _sage_const_6028315082247779887961951560545668694526691890229817563143311119270617403693350910031799104434277949319890107762455163850703921738472917634867859606847794 = Integer(6028315082247779887961951560545668694526691890229817563143311119270617403693350910031799104434277949319890107762455163850703921738472917634867859606847794); _sage_const_54955214087408054574639729863697780289917984310730835458090223325435021274172468012832517546626896624456834729572311477842264190972977509219907477634083 = Integer(54955214087408054574639729863697780289917984310730835458090223325435021274172468012832517546626896624456834729572311477842264190972977509219907477634083); _sage_const_342147702661832311751468576629899521067307662248458817783193865564691766106662699199037184407393856683305357946478109528212726742652028446156423293759495 = Integer(342147702661832311751468576629899521067307662248458817783193865564691766106662699199037184407393856683305357946478109528212726742652028446156423293759495); _sage_const_5045256171197153662659805310768780358126926195752717582412805175819426043334006935062661456713084080128036141697333893123885382485753302697656539546378646 = Integer(5045256171197153662659805310768780358126926195752717582412805175819426043334006935062661456713084080128036141697333893123885382485753302697656539546378646); _sage_const_4957208857276581545493564767148462832595810457737217931888083524598986573689113975674835106042864330222066407555666478765561568444168705079510156517203070 = Integer(4957208857276581545493564767148462832595810457737217931888083524598986573689113975674835106042864330222066407555666478765561568444168705079510156517203070); _sage_const_7486017820872949036353289357901034760775062541626845812768028842420593513451573429714068245600955441542150300541257022420000572694134380629594697920184740 = Integer(7486017820872949036353289357901034760775062541626845812768028842420593513451573429714068245600955441542150300541257022420000572694134380629594697920184740); _sage_const_8226728755144980991515622478753766356971120362981609869522311413868506575912573463787119396638250118772979598148303904083838791983736914651565192727844605 = Integer(8226728755144980991515622478753766356971120362981609869522311413868506575912573463787119396638250118772979598148303904083838791983736914651565192727844605); _sage_const_4431655202191701147338041590093670300487297768380174726408333359491490029418898891528732919661455852161470681981229285014450536948268192832036041572926924 = Integer(4431655202191701147338041590093670300487297768380174726408333359491490029418898891528732919661455852161470681981229285014450536948268192832036041572926924); _sage_const_8647025912338797102442972048619256386169507812728554329085574437106243231798901187496291670239665382922226570830982536706456587869687745240352434450756312 = Integer(8647025912338797102442972048619256386169507812728554329085574437106243231798901187496291670239665382922226570830982536706456587869687745240352434450756312); _sage_const_2520246855135922669653598434877420341940326743742714990675000157357141373278038561398788915497535820072178382700527746948255137517065559929846879483039562 = Integer(2520246855135922669653598434877420341940326743742714990675000157357141373278038561398788915497535820072178382700527746948255137517065559929846879483039562); _sage_const_8616057268069342724088178910032851425294617718789404253135555443501813994231727847483092736049502145133238112893174458934364296601524142665817520989070749 = Integer(8616057268069342724088178910032851425294617718789404253135555443501813994231727847483092736049502145133238112893174458934364296601524142665817520989070749); _sage_const_2024775642638298741269502077354252239672133564074347461107361908142608120080424815421242796519168197424882814725038633666198036059907419031911785455529021 = Integer(2024775642638298741269502077354252239672133564074347461107361908142608120080424815421242796519168197424882814725038633666198036059907419031911785455529021); _sage_const_4406659084133434917081115922782723655507657683804032849915144608281597209204226774023037910137260956400426685591934553781727963653637626492730708335638573 = Integer(4406659084133434917081115922782723655507657683804032849915144608281597209204226774023037910137260956400426685591934553781727963653637626492730708335638573); _sage_const_5574864631301586137792361991807652105963316161947612387763087644386918228877386749932327710029369771006315768712888652312649919291854866496563766575081054 = Integer(5574864631301586137792361991807652105963316161947612387763087644386918228877386749932327710029369771006315768712888652312649919291854866496563766575081054); _sage_const_9594866052961536590925545851261694740555229235703308920424006533582615096933397109135891666286036738335169318505432118920086511516956000772092497221318304 = Integer(9594866052961536590925545851261694740555229235703308920424006533582615096933397109135891666286036738335169318505432118920086511516956000772092497221318304); _sage_const_3881825077849160462414964584825340799859037266962469424889060047059803153752438010587152659335871968983809251047444518755760514004699224021012338042179648 = Integer(3881825077849160462414964584825340799859037266962469424889060047059803153752438010587152659335871968983809251047444518755760514004699224021012338042179648); _sage_const_756281302809369394494482269149346727056208074219784209274536774728572336201183211263125216261566857754298266013475477811185637959310634556007309709854134 = Integer(756281302809369394494482269149346727056208074219784209274536774728572336201183211263125216261566857754298266013475477811185637959310634556007309709854134); _sage_const_1846881711601531842432888076020905741526630892812500247865038558454957113059163466791532593595032273820494247593515916797526310596339683517113211307263577 = Integer(1846881711601531842432888076020905741526630892812500247865038558454957113059163466791532593595032273820494247593515916797526310596339683517113211307263577); _sage_const_4030530354408929242783069222226481132829142327653792096788969985131607375641943843162403992035302653597654087783122149911485768898729656478391631017217077 = Integer(4030530354408929242783069222226481132829142327653792096788969985131607375641943843162403992035302653597654087783122149911485768898729656478391631017217077); _sage_const_6705582497840714987721872022317863009787683023483268252829812723187488202729627225358822175099227936252883982208811551777005521772629914225528408369956784 = Integer(6705582497840714987721872022317863009787683023483268252829812723187488202729627225358822175099227936252883982208811551777005521772629914225528408369956784); _sage_const_7393473515699613471135722147161641773523927171885454572109221603886780107772896779083329447318689895908412105251891451193628697747434152122209042374455840 = Integer(7393473515699613471135722147161641773523927171885454572109221603886780107772896779083329447318689895908412105251891451193628697747434152122209042374455840); _sage_const_0 = Integer(0)
from secrets import randbits
from hashlib import sha512
from Crypto.Util.number import long_to_bytes

n = _sage_const_7 
nn = n * _sage_const_2 
bits = _sage_const_512 

pp = int(_sage_const_9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683817 )
p = GF(pp)

F = p['x']; (x,) = F._first_ngens(1)
mod = x**_sage_const_14  + _sage_const_2 *x**_sage_const_13  + _sage_const_9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683794 *x**_sage_const_12  + _sage_const_9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683779 *x**_sage_const_11  + _sage_const_186 *x**_sage_const_10  + _sage_const_252 *x**_sage_const_9  + _sage_const_9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683204 *x**_sage_const_8  + _sage_const_9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683073 *x**_sage_const_7  + _sage_const_806 *x**_sage_const_6  + _sage_const_886 *x**_sage_const_5  + _sage_const_9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683495 *x**_sage_const_4  + _sage_const_9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683621 *x**_sage_const_3  + _sage_const_109 *x**_sage_const_2  + _sage_const_9672183493259460549966072949779649569914788410584012842260769846713851895540725248016616432821989866243574429754384520673851521306356271581372104554683799 *x + _sage_const_1 
g = _sage_const_8962607566406882199675004280724845190368675470080757634774685876074323550352697378725496930349833984249221837085369500235938749325874312457043818400322247 *x**_sage_const_13  + _sage_const_3337021588594422092310501575569035015793888607775320698822478199558062978669690430311134844149545347869843739089757361497296974259285965107448711022785383 *x**_sage_const_12  + _sage_const_713847582123411122060960658489156835463460667568575895992013853906604470365897024962135987117544760325370118419731307773225044281379827746161946475302902 *x**_sage_const_11  + _sage_const_7607070037188627265482280445225765886909767973749738211753579779720323813441283786573743394570716096511457952150457455105672212964546550043524519124831819 *x**_sage_const_10  + _sage_const_7558571214025553741786144820642443061381689386358397166956819857443834264449819665203003481410588612156807982887595037809886138172294332404771320977663748 *x**_sage_const_9  + _sage_const_304700504136012424238865405671041686114024093887434383351181862662217744733576172993693671466544791099572450525267090561520888596125171684534505219084780 *x**_sage_const_8  + _sage_const_8719178863192150720460952697284938700244569410239992570708742933711653269124671049093036115358035100173437671585783944021646846126282180789376109012662448 *x**_sage_const_7  + _sage_const_6028315082247779887961951560545668694526691890229817563143311119270617403693350910031799104434277949319890107762455163850703921738472917634867859606847794 *x**_sage_const_6  + _sage_const_54955214087408054574639729863697780289917984310730835458090223325435021274172468012832517546626896624456834729572311477842264190972977509219907477634083 *x**_sage_const_5  + _sage_const_342147702661832311751468576629899521067307662248458817783193865564691766106662699199037184407393856683305357946478109528212726742652028446156423293759495 *x**_sage_const_4  + _sage_const_5045256171197153662659805310768780358126926195752717582412805175819426043334006935062661456713084080128036141697333893123885382485753302697656539546378646 *x**_sage_const_3  + _sage_const_4957208857276581545493564767148462832595810457737217931888083524598986573689113975674835106042864330222066407555666478765561568444168705079510156517203070 *x**_sage_const_2  + _sage_const_7486017820872949036353289357901034760775062541626845812768028842420593513451573429714068245600955441542150300541257022420000572694134380629594697920184740 *x + _sage_const_8226728755144980991515622478753766356971120362981609869522311413868506575912573463787119396638250118772979598148303904083838791983736914651565192727844605 
A = _sage_const_4431655202191701147338041590093670300487297768380174726408333359491490029418898891528732919661455852161470681981229285014450536948268192832036041572926924 *x**_sage_const_13  + _sage_const_8647025912338797102442972048619256386169507812728554329085574437106243231798901187496291670239665382922226570830982536706456587869687745240352434450756312 *x**_sage_const_12  + _sage_const_2520246855135922669653598434877420341940326743742714990675000157357141373278038561398788915497535820072178382700527746948255137517065559929846879483039562 *x**_sage_const_11  + _sage_const_8616057268069342724088178910032851425294617718789404253135555443501813994231727847483092736049502145133238112893174458934364296601524142665817520989070749 *x**_sage_const_10  + _sage_const_2024775642638298741269502077354252239672133564074347461107361908142608120080424815421242796519168197424882814725038633666198036059907419031911785455529021 *x**_sage_const_9  + _sage_const_4406659084133434917081115922782723655507657683804032849915144608281597209204226774023037910137260956400426685591934553781727963653637626492730708335638573 *x**_sage_const_8  + _sage_const_5574864631301586137792361991807652105963316161947612387763087644386918228877386749932327710029369771006315768712888652312649919291854866496563766575081054 *x**_sage_const_7  + _sage_const_9594866052961536590925545851261694740555229235703308920424006533582615096933397109135891666286036738335169318505432118920086511516956000772092497221318304 *x**_sage_const_6  + _sage_const_3881825077849160462414964584825340799859037266962469424889060047059803153752438010587152659335871968983809251047444518755760514004699224021012338042179648 *x**_sage_const_5  + _sage_const_756281302809369394494482269149346727056208074219784209274536774728572336201183211263125216261566857754298266013475477811185637959310634556007309709854134 *x**_sage_const_4  + _sage_const_1846881711601531842432888076020905741526630892812500247865038558454957113059163466791532593595032273820494247593515916797526310596339683517113211307263577 *x**_sage_const_3  + _sage_const_4030530354408929242783069222226481132829142327653792096788969985131607375641943843162403992035302653597654087783122149911485768898729656478391631017217077 *x**_sage_const_2  + _sage_const_6705582497840714987721872022317863009787683023483268252829812723187488202729627225358822175099227936252883982208811551777005521772629914225528408369956784 *x + _sage_const_7393473515699613471135722147161641773523927171885454572109221603886780107772896779083329447318689895908412105251891451193628697747434152122209042374455840 

def getFlag(x):
    return 'grey{' + sha512(long_to_bytes(x)).hexdigest() + '}'

def power(a, b, mod):
    if b == _sage_const_0 :
        return _sage_const_1 
    elif b % _sage_const_2  == _sage_const_0 :
        return power(a, b // _sage_const_2 , mod) ** _sage_const_2  % mod
    else:
        return a * power(a, b - _sage_const_1 , mod) % mod

def homSkele(P):
    deg = P.degree()
    R = PolynomialRing(p, 'a', deg * _sage_const_2  + _sage_const_1 )
    originalVar = R.gens()
    x = originalVar[deg * _sage_const_2 ]
    I = R.ideal([P(x)])
    R = R.quotient(I)
    vars = R.gens()
    x = vars[deg * _sage_const_2 ]
    a = [vars[i] for i in range(deg)]
    b = [vars[i + deg] for i in range(deg)]
    g = _sage_const_0 
    f = _sage_const_0 
    for i in range(deg):
        g += a[i] * x ** i

    for i in range(deg):
        f += b[i] * x ** i

    h = (g * f).lift()
    mat = [[_sage_const_0  for _ in range(deg)] for _ in range(deg)]
    for i in range(deg):
        for j in range(deg):
            mat[i][j] = h.coefficient({b[j]:_sage_const_1 , x: i})

    return (mat, [originalVar[i] for i in range(deg)])

def hom(skele, vars, g):
    subDic = {}
    coeff = g.list()
    n = len(skele)
    for i in range(n):
        subDic[vars[i]] = coeff[i] if i < len(coeff) else _sage_const_0 

    mat = [[_sage_const_0  for _ in range(n)] for _ in range(n)]

    for i in range(n):
        for j in range(n):
            mat[i][j] = skele[i][j].subs(subDic)

    return Matrix(p, mat)

def dlpMatrix(A, G):
    n = int(len(list(A)))
    print("Initiailizing Field... ")
    R = GF(pp ** nn, names=('k',)); (k,) = R._first_ngens(1)
    print("Calculating Answer...")
    RR = R['z']; (z,) = RR._first_ngens(1)
    v = vector([_sage_const_1  for _ in range(n)])
    G = Matrix(R, G)
    lam = RR(G.charpoly()(x = z)).roots()[_sage_const_0 ][_sage_const_0 ]
    ff = G.charpoly()(x = z)/((z - lam)**_sage_const_2 )
    v1 = (G - R(lam) * identity_matrix(R, n)) * ff(z = G) * v
    v2 = ff(z = G) * v
    Q = Matrix(R, [[R(i) for i in v1], [R(i) for i in v2]])
    B = list(Q.right_kernel().basis())
    Q = list(Q)
    for v in B:
        Q.append(v)
    Q = Matrix(R, Q)
    Q = Q.transpose()
    res = Q**(-_sage_const_1 ) * A * Q
    return lam * res[_sage_const_0 ][_sage_const_1 ] * res[_sage_const_0 ][_sage_const_0 ] ** (-_sage_const_1 )


def solve(A, g, P):
    print("generating skeleton...")
    skele, vars = homSkele(P)
    print("generating homomorphism...")
    A = hom(skele, vars, A % P)
    g = hom(skele, vars, g % P)
    print("solving DLP...")
    return dlpMatrix(A, g)


tempMod = factor(mod)[_sage_const_0 ][_sage_const_0 ]
F = GF(pp ** tempMod.degree(), name='z', modulus=tempMod, impl='pari_ffelt', names=('z',)); (z,) = F._first_ngens(1)
nA = A(x = z)
ng = g(x = z)
print(getFlag(int(nA.log(ng))))

